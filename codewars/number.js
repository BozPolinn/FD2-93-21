// У некоторых чисел есть забавные свойства. Например:

// 89 -> 8¹ + 9² = 89 * 1
// 695 -> 6² + 9³ + 5⁴ = 1390 = 695 * 2
// 46288 -> 4³ + 6⁴ + 2⁵ + 8⁶ + 8⁷ = 2360688 = 46288 * 51

// Дано положительное целое число n, записанное как abcd ... (a, b, c, d ... цифры) и положительное целое число p
// мы хотим найти положительное целое число k, если оно существует, например, сумма цифр n, 
// взятых в последовательные степени p, равна k * n.

// Другими словами:
// Существует ли целое число k, например: (a ^ p + b ^ (p + 1) + c ^ (p + 2) + d ^ (p + 3) + ...) = n * k

// Если это так, мы вернем k, если не вернем -1.
// Примечание: n и p всегда будут указываться как строго положительные целые числа.

// let n = 46288;
// let p = 3;

let n = 92;
let p = 1;

function digPow(n, p){
    let sum = 0;
    let str = n.toString();
    for (let i = 0; i < str.length; i++) {
        sum = sum + (parseInt(str[i]) ** (p + i));
    }
    // if (sum % n === 0) {
    //     return sum / n;
    // }
    // else {
    //     return -1;
    // }
    return (sum % n === 0) ? (sum / n) : -1;
}
console.log(digPow(n, p));